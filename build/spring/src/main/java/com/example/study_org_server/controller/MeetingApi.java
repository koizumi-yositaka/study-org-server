/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.study_org_server.controller;

import org.openapitools.example.model.BadRequestError;
import org.openapitools.example.model.ConflictError;
import org.openapitools.example.model.ForbiddenError;
import org.openapitools.example.model.MeetingForm;
import org.openapitools.example.model.MeetingResponseDTO;
import org.openapitools.example.model.MeetingResponseDTOList;
import org.openapitools.example.model.MeetingSearchForm;
import org.openapitools.example.model.OrderProp;
import org.openapitools.example.model.Pagination;
import org.openapitools.example.model.ResourceNotFoundError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-02T20:56:31.515614+09:00[Asia/Tokyo]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "meeting", description = "ミーティング")
public interface MeetingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /meeting
     *
     * @param searchForm 検索パラむ (optional)
     * @param pagination ページネーション (optional)
     * @param orderProp Order (optional)
     * @return 会議一覧 (status code 200)
     */
    @Operation(
        operationId = "meetingGet",
        tags = { "meeting" },
        responses = {
            @ApiResponse(responseCode = "200", description = "会議一覧", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MeetingResponseDTOList.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/meeting",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MeetingResponseDTOList> meetingGet(
        @Parameter(name = "searchForm", description = "検索パラむ", in = ParameterIn.QUERY) @Valid MeetingSearchForm searchForm,
        @Parameter(name = "pagination", description = "ページネーション", in = ParameterIn.QUERY) @Valid Pagination pagination,
        @Parameter(name = "orderProp", description = "Order", in = ParameterIn.QUERY) @Valid OrderProp orderProp
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"openerId\" : 6, \"startTime\" : \"1700\", \"id\" : 0, \"detail\" : \"detail\", \"endTime\" : \"1800\", \"title\" : \"title\", \"eventDate\" : \"2017-07-21\" }, { \"openerId\" : 6, \"startTime\" : \"1700\", \"id\" : 0, \"detail\" : \"detail\", \"endTime\" : \"1800\", \"title\" : \"title\", \"eventDate\" : \"2017-07-21\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /meeting/{meetingId}
     * 要素の削除
     *
     * @param meetingId 削除対象のID (required)
     * @return No Content (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "meetingMeetingIdDelete",
        description = "要素の削除",
        tags = { "meetings" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceNotFoundError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/meeting/{meetingId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> meetingMeetingIdDelete(
        @Min(1) @Parameter(name = "meetingId", description = "削除対象のID", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") Integer meetingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invalid-params\" : [ { \"reason\" : \"reason\", \"name\" : \"name\" }, { \"reason\" : \"reason\", \"name\" : \"name\" } ], \"detail\" : \"リクエストが不正です。再度リクエストを送信してください\", \"title\" : \"BadRequest\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"detail\", \"title\" : \"Resource Not Found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /meeting/{meetingId}
     *
     * @param meetingId 取得対象のID (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "meetingMeetingIdGet",
        tags = { "meetings" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MeetingResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceNotFoundError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/meeting/{meetingId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MeetingResponseDTO> meetingMeetingIdGet(
        @Min(1) @Parameter(name = "meetingId", description = "取得対象のID", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") Integer meetingId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"openerId\" : 6, \"startTime\" : \"1700\", \"id\" : 0, \"detail\" : \"detail\", \"endTime\" : \"1800\", \"title\" : \"title\", \"eventDate\" : \"2017-07-21\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invalid-params\" : [ { \"reason\" : \"reason\", \"name\" : \"name\" }, { \"reason\" : \"reason\", \"name\" : \"name\" } ], \"detail\" : \"リクエストが不正です。再度リクエストを送信してください\", \"title\" : \"BadRequest\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"detail\", \"title\" : \"Resource Not Found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /meeting/{meetingId}
     *
     * @param meetingId 更新 (required)
     * @param meetingForm  (required)
     * @return ok (status code 200)
     *         or Bad Request (status code 400)
     *         or ForbiddenError (status code 403)
     *         or Not Found (status code 404)
     *         or Request Conflict (status code 409)
     */
    @Operation(
        operationId = "meetingMeetingIdPut",
        tags = { "meeting" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MeetingResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestError.class))
            }),
            @ApiResponse(responseCode = "403", description = "ForbiddenError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ForbiddenError.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResourceNotFoundError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConflictError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/meeting/{meetingId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MeetingResponseDTO> meetingMeetingIdPut(
        @Min(1) @Parameter(name = "meetingId", description = "更新", required = true, in = ParameterIn.PATH) @PathVariable("meetingId") Integer meetingId,
        @Parameter(name = "MeetingForm", description = "", required = true) @Valid @RequestBody MeetingForm meetingForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"openerId\" : 6, \"startTime\" : \"1700\", \"id\" : 0, \"detail\" : \"detail\", \"endTime\" : \"1800\", \"title\" : \"title\", \"eventDate\" : \"2017-07-21\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invalid-params\" : [ { \"reason\" : \"reason\", \"name\" : \"name\" }, { \"reason\" : \"reason\", \"name\" : \"name\" } ], \"detail\" : \"リクエストが不正です。再度リクエストを送信してください\", \"title\" : \"BadRequest\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"detail\", \"title\" : \"パスワードが違います\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"detail\", \"title\" : \"Resource Not Found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"detail\", \"title\" : \"予約が重複\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /meeting
     *
     * @param meetingForm  (required)
     * @return created (status code 201)
     *         or Bad Request (status code 400)
     *         or Request Conflict (status code 409)
     */
    @Operation(
        operationId = "meetingPost",
        tags = { "meetings" },
        responses = {
            @ApiResponse(responseCode = "201", description = "created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MeetingResponseDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Request Conflict", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConflictError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/meeting",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<MeetingResponseDTO> meetingPost(
        @Parameter(name = "MeetingForm", description = "", required = true) @Valid @RequestBody MeetingForm meetingForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"openerId\" : 6, \"startTime\" : \"1700\", \"id\" : 0, \"detail\" : \"detail\", \"endTime\" : \"1800\", \"title\" : \"title\", \"eventDate\" : \"2017-07-21\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"invalid-params\" : [ { \"reason\" : \"reason\", \"name\" : \"name\" }, { \"reason\" : \"reason\", \"name\" : \"name\" } ], \"detail\" : \"リクエストが不正です。再度リクエストを送信してください\", \"title\" : \"BadRequest\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"detail\", \"title\" : \"予約が重複\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
