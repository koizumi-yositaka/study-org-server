/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.study_org_server.controller;

import org.openapitools.example.model.ForbiddenError;
import org.openapitools.example.model.LoginUserForm;
import org.openapitools.example.model.MeetingResponseDTOList;
import org.openapitools.example.model.UserNotFoundError;
import org.openapitools.example.model.UserResponseDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-27T22:22:42.392199+09:00[Asia/Tokyo]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "opts", description = "運用監視関連のAPI")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/health
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "apiHealthGet",
        tags = { "opts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/health"
    )
    
    default ResponseEntity<Void> apiHealthGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/meeting
     *
     * @return 会議一覧 (status code 200)
     */
    @Operation(
        operationId = "apiMeetingGet",
        tags = { "meeting" },
        responses = {
            @ApiResponse(responseCode = "200", description = "会議一覧", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MeetingResponseDTOList.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/meeting",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MeetingResponseDTOList> apiMeetingGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"results\" : [ { \"id\" : 0, \"title\" : \"title\" }, { \"id\" : 0, \"title\" : \"title\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/user/login
     *
     * @param loginUserForm  (required)
     * @return LOGIN SUCCESS (status code 200)
     *         or UserNotFoundError (status code 404)
     *         or ForbiddenError (status code 403)
     */
    @Operation(
        operationId = "apiUserLoginPost",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "LOGIN SUCCESS", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "UserNotFoundError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserNotFoundError.class))
            }),
            @ApiResponse(responseCode = "403", description = "ForbiddenError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ForbiddenError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponseDTO> apiUserLoginPost(
        @Parameter(name = "LoginUserForm", description = "", required = true) @Valid @RequestBody LoginUserForm loginUserForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"ユーザが見つかりません\", \"title\" : \"User Not Found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"detail\", \"title\" : \"パスワードが違います\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/user/manage
     *
     * @return OK (status code 200)
     *         or NG (status code 401)
     */
    @Operation(
        operationId = "apiUserManagePost",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK"),
            @ApiResponse(responseCode = "401", description = "NG")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/manage"
    )
    
    default ResponseEntity<Void> apiUserManagePost(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/user/role
     *
     * @return OK (status code 200)
     *         or 認証エラー (status code 403)
     */
    @Operation(
        operationId = "apiUserRoleGet",
        tags = { "opts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "403", description = "認証エラー")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/user/role",
        produces = { "application/json" }
    )
    
    default ResponseEntity<UserResponseDTO> apiUserRoleGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/user/signup
     *
     * @param loginUserForm  (required)
     * @return SIGNUP SUCCESS (status code 201)
     *         or UserNotFoundError (status code 404)
     */
    @Operation(
        operationId = "apiUserSignupPost",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "201", description = "SIGNUP SUCCESS", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "UserNotFoundError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserNotFoundError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/user/signup",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponseDTO> apiUserSignupPost(
        @Parameter(name = "LoginUserForm", description = "", required = true) @Valid @RequestBody LoginUserForm loginUserForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"ユーザが見つかりません\", \"title\" : \"User Not Found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/user/signup
     *
     * @param loginUserForm  (required)
     * @return SIGNUP SUCCESS (status code 200)
     *         or UserNotFoundError (status code 404)
     */
    @Operation(
        operationId = "apiUserSignupPut",
        tags = { "users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SIGNUP SUCCESS", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "UserNotFoundError", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserNotFoundError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/user/signup",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<UserResponseDTO> apiUserSignupPut(
        @Parameter(name = "LoginUserForm", description = "", required = true) @Valid @RequestBody LoginUserForm loginUserForm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"role\" : \"role\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"detail\" : \"ユーザが見つかりません\", \"title\" : \"User Not Found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
